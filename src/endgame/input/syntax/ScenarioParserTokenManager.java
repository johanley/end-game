/* Generated By:JavaCC: Do not edit this line. ScenarioParserTokenManager.java */
package endgame.input.syntax;
import java.io.*;
import java.util.*;
import hirondelle.date4j.*;
import endgame.Scenario;
import endgame.model.*;
import endgame.account.*;
import endgame.account.tfsa.*;
import endgame.account.rif.*;
import endgame.account.lif.*;
import endgame.account.nra.*;
import endgame.bank.*;
import endgame.entitlements.*;
import endgame.tax.*;
import endgame.tax.provincial.*;
import endgame.security.stock.*;
import endgame.security.stock.price.*;
import endgame.security.stock.liquidation.*;
import endgame.security.stock.commission.*;
import endgame.security.stock.transaction.*;
import endgame.security.pension.annuity.*;
import endgame.security.gic.*;
import endgame.survival.*;
import endgame.transaction.*;
import endgame.util.*;

/** Token Manager. */
public class ScenarioParserTokenManager implements ScenarioParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000000000L) != 0L || (active2 & 0x100L) != 0L)
            return 19;
         if ((active1 & 0x340800000000000L) != 0L || (active2 & 0x2060000L) != 0L)
            return 21;
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x2000080060e003L) != 0L || (active2 & 0x40000000013L) != 0L)
            return 16;
         if ((active2 & 0x2800L) != 0L)
            return 122;
         if ((active0 & 0x40L) != 0L || (active1 & 0x2000000000000000L) != 0L || (active2 & 0x100000000000L) != 0L)
            return 443;
         if ((active0 & 0x1c1800000000000L) != 0L || (active1 & 0x8c8014211f800008L) != 0L || (active2 & 0xa0370c0800cL) != 0L)
            return 14;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x240001a04L) != 0L || (active2 & 0x10000L) != 0L)
            return 8;
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x4000020000000000L) != 0L || (active2 & 0x12008084000L) != 0L)
            return 12;
         if ((active0 & 0x8200000000000L) != 0L || (active2 & 0x4000600L) != 0L)
            return 24;
         if ((active0 & 0x4000L) != 0L)
            return 6;
         if ((active0 & 0x20000000000L) != 0L || (active2 & 0x4803000c0L) != 0L)
            return 10;
         return -1;
      case 1:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40000040001804L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40000040001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40000040001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0xe008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0xc008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0xc008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0xc008000000000000L) != 0L || (active1 & 0x40001804L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0xc008000000000000L) != 0L || (active1 & 0x40001800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0xc008000000000000L) != 0L || (active1 & 0x1800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 14, 6);
      case 44:
         return jjStopAtPos(0, 8);
      case 45:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x100000000000L);
      case 58:
         return jjStopAtPos(0, 7);
      case 61:
         return jjStopAtPos(0, 13);
      case 95:
         return jjStopAtPos(0, 10);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x2000080060e003L, 0x40000000013L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x4803000c0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x340800000000000L, 0x2060000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x14000000000000L, 0x400010060L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x1000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x604000000000L, 0x4000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000011000000000L, 0x1000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x2000000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x100000201e0000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x4000020000000000L, 0x12008084000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8200000000000L, 0x0L, 0x4000600L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x240001a04L, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x8008000000100L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c1800000000000L, 0x8c8014211f800008L, 0xa0370c0800cL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x1000000000090L, 0x9800000020L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x100L);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x210020000000000L, active1, 0x4040018000000090L, active2, 0x128c0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000018000000L, active2, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xed04000000000000L, active1, 0x80040200c0001804L, active2, 0x100000708L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x1000000000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60e003L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00c0000000000L, active1, 0x1018604420010160L, active2, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x60000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000800000000L, active2, 0x20000001000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020000000000000L, active1, 0x2000000000000L, active2, 0x40000000010L);
      case 79:
      case 111:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000001e0000L, active2, 0x1200c384000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0x2000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x1200000200L, active2, 0x5800000020L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00142100000008L, active2, 0x180010c08004L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x800007800400L, active2, 0x4e0000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x84020080000008L, active2, 0x21a10c68120L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1020000000000000L, active2, 0x2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x40000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x200000000060e003L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000000000100L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x2000200000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x100000008L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c8000000000000L, active1, 0L, active2, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x21020000000000L, active1, 0x300008040000004L, active2, 0x400080840d0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc00103900000200L, active2, 0x184000300005L);
      case 80:
      case 112:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 153);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0x1000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xe000000000000000L, active1, 0x7801c00L, active2, 0x60000000L);
      case 83:
      case 115:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4100000000000L, active1, 0x41800000000000L, active2, 0x1000800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x4000000000000000L, active2, 0x600L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x420010060L, active2, 0x12000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e0000L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x604000000090L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x480010000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10180400007e0183L, active2, 0x100481000e00L);
      case 48:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x200100000000e010L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0xc00102300000000L, active2, 0x80000000004L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x810000000000000L, active1, 0x604038000000L, active2, 0x12000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 118);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400010460L, active2, 0x4000001L);
      case 75:
      case 107:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 76:
      case 108:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80080080000000L, active2, 0x20100001000L);
      case 77:
      case 109:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 166);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 105);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x8L, active2, 0x1800000020L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0x2L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L, active2, 0x210c08100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000000000000L, active1, 0x10040001804L, active2, 0x300000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1001000000000000L, active1, 0x2800007800000L, active2, 0x8084000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xe0000000000000L, active1, 0xc000000800000000L, active2, 0x40000000010L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000000000200L, active2, 0x60000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x1000020000000L, active2, 0x121000001c0L);
      case 46:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 49:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 172);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000000000L, active1, 0x7800003L, active2, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x90L, active2, 0x60000L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x640418010068L, active2, 0x1L);
      case 69:
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 97);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 103);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x8300000000000000L, active2, 0x201010000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8084000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x20800401e0204L, active2, 0x40060000e00L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00102100000000L, active2, 0x80000000004L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4c0000000000000L, active1, 0x84000000000000L, active2, 0x20000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000000e000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xe000000000000000L, active1, 0x800000001800L, active2, 0x1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 125);
         return jjMoveStringLiteralDfa5_0(active0, 0x804000000000000L, active1, 0x4000000000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000400L, active2, 0x1880000020L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1080600000L, active2, 0x10f08000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0x2L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0xc80702000000000L, active2, 0xa0010f08005L);
      case 48:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x18c0000000000000L, active1, 0x12000020600008L, active2, 0x4060020L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L, active2, 0x40L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(5, 58);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000040400010060L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1800000000L);
      case 72:
      case 104:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 100);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x8010000000100L, active2, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x10L, active2, 0x8084010L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000003L, active2, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xe000000000000000L, active1, 0x80200000001e1a00L, active2, 0x10e02L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x1000000040000004L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x301000000000080L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(5, 96);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 161);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2100000000L);
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 99);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xe000L, active2, 0x40080000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x18000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x60000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0x7800000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L, active2, 0x1000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x29000000000000L, active1, 0x4800087800000L, active2, 0x10L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xe000000000000000L, active1, 0x410000001880L, active2, 0x10000100000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x880000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 162);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000001e0200L, active2, 0x60e20L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0x1800000140L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000400L, active2, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000000L, active1, 0x2000038000000L, active2, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x9000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000440010064L, active2, 0x10000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000003L, active2, 0xe0000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x400202000000000L, active2, 0x20001200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 126);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000e000L, active2, 0x80000000004L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000000000L, active1, 0x8320000000000100L, active2, 0x2100010002L);
      case 86:
      case 118:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 106);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xc00000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000600000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40008084000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x1810000000000000L, active1, 0x302000040600014L, active2, 0x4000c094002L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0x80000000000000L, active2, 0x20000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x480L, active2, 0x80000000L);
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10068L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200018000000L, active2, 0x201004L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000000L, active1, 0x9018000000000200L, active2, 0xc00000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x60000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0xe000000000000000L, active1, 0x4000000001800L, active2, 0x1000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 104);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0xc011000201e0000L, active2, 0x2110008e01L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0x80000000040L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2005000000L, active2, 0x1860000100L);
      case 83:
      case 115:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 117);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0x10000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x24000000000000L, active1, 0x80002800000L, active2, 0xb0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xe003L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0xe000000000000000L, active1, 0x80018011868L, active2, 0x1860060000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000005000200L, active2, 0x4000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000600010L, active2, 0x2100000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 69:
      case 101:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(8, 148);
         return jjMoveStringLiteralDfa9_0(active0, 0x21000000000000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L, active2, 0x10L);
      case 72:
      case 104:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(8, 168);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2800100L, active2, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x4002040000004L, active2, 0x20L);
      case 75:
      case 107:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 159);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x280000000000000L, active2, 0x80000000000L);
      case 77:
      case 109:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 112);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x181000001e0000L, active2, 0x14000e00L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x20000003L, active2, 0xc09000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0000000000000L, active1, 0x800400000000000L, active2, 0x1000140L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xe000L, active2, 0x40008000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x102200080000000L, active2, 0x280000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L, active2, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x1000000000000400L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0x100L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0xe800000000000000L, active1, 0x80000000001810L, active2, 0x40000010000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x18000000L, active2, 0x60000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x202000000000L, active2, 0x20000200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0xc00080L);
      case 69:
      case 101:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(9, 139);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0xa01e0080L, active2, 0x8080202L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x1600000000000400L, active2, 0x80010000000L);
      case 75:
      case 107:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(9, 160);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(9, 165);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0x800000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000080000000200L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4100000000000L, active2, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000000000L, active1, 0x40000004L, active2, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x2000000000100L, active2, 0x4000020L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xe000L, active2, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0x2e00008L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0x100000000000000L, active2, 0x1800000050L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x5000062L, active2, 0x29000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x18400000000000L, active2, 0x4L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0800000000000L, active1, 0x88000000381e0202L, active2, 0x1200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0x60L, active2, 0x110L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000004L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xa02007e00008L, active2, 0x60240004L);
      case 72:
      case 104:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(10, 143);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20000020000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0x4180000000000L, active2, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xe100L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0xe000000000000000L, active1, 0x18000080001800L, active2, 0x1000000L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 50);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80400000000000L, active2, 0x1c000020L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1002000000000400L, active2, 0xc04000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000010L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0x200000000010000L, active2, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(10, 171);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x400000000000080L, active2, 0x1800000001L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 88:
      case 120:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(10, 59);
         break;
      case 89:
      case 121:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(10, 144);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0x118002005000000L, active2, 0x10L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000020040000L, active2, 0x18080080L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x20000L, active2, 0x200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000600100L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0xe000L, active2, 0x20001000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x400000080000010L, active2, 0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(11, 113);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x40000000100L);
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(11, 74);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000200000000000L, active2, 0x60200004L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0xe000000000000000L, active1, 0x40011804L, active2, 0x1800000000L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(11, 60);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10100000L, active2, 0x60000L);
      case 83:
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(11, 71);
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0x180002800000L, active2, 0x20L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(11, 110);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(11, 114);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(11, 134);
         return jjMoveStringLiteralDfa12_0(active0, 0x18000000000000L, active1, 0x808020aL, active2, 0x4000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4003L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0xc00000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000060L, active2, 0xc00000L);
      case 49:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(12, 88);
         break;
      case 50:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 90);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0x800000010120200L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x21800040004L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0x80000000000000L, active2, 0x40060020202L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(12, 52);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xa880002L, active2, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000600108L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(12, 156);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x6000e004L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L, active2, 0x1005000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0x400000000000000L, active2, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x80001L);
      case 83:
      case 115:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(12, 124);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000010000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(12, 107);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(12, 109);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(12, 149);
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0x100000000000010L, active2, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0xe000000000000000L, active1, 0x800080001800L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x18000000000000L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0x10L, active2, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x60L, active2, 0x1000L);
      case 68:
      case 100:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(13, 147);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(13, 82);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(13, 130);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000e004L, active2, 0x840000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x60000200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x18100000000000L, active2, 0L);
      case 75:
      case 107:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(13, 169);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x1800000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0x800800000000000L, active2, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(13, 48);
         return jjMoveStringLiteralDfa14_0(active0, 0xe000000000000000L, active1, 0x400000000001900L, active2, 0x40000000003L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0x100002022800000L, active2, 0x10L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000L, active1, 0x808000aL, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x30000L, active2, 0x20000L);
      case 84:
      case 116:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000010500000L, active2, 0x9004000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 88:
      case 120:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(13, 73);
         break;
      case 123:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(13, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0x1000000c0410004L, active2, 0x1801004001L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x8800000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(14, 84);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(14, 92);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(14, 111);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x808000aL, active2, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000L, active2, 0x60000000L);
      case 76:
      case 108:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(14, 135);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80002002800010L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xe000L, active2, 0x840100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200100000000000L, active2, 0x1200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x60000000000000L, active1, 0x60L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(14, 122);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 14;
         }
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(14, 170);
         return jjMoveStringLiteralDfa15_0(active0, 0xc000000000000000L, active1, 0x18000000001800L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8800000020000000L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(14, 155);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa16_0(active0, 0xc020000000000000L, active1, 0x200000000001910L, active2, 0x4000010L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 67:
      case 99:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(15, 81);
         break;
      case 68:
      case 100:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(15, 151);
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active1, 0x2800000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(15, 129);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800000000000060L, active2, 0x1000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x18000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8080002000000000L, active2, 0x800000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xcL, active2, 0x1000L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(15, 108);
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L, active1, 0x20000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x1000020000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000040000000L, active2, 0x200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8080002L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 15;
         }
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(15, 146);
         return jjMoveStringLiteralDfa16_0(active0, 0x48000000000000L, active1, 0x8040c000L, active2, 0x60000100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0x2800000L, active2, 0x60000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x4080000000000000L, active1, 0xc0000004L, active2, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L, active1, 0x2000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8018000000000060L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(16, 140);
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8L, active2, 0x201L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8480002L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0x100000000000000L, active2, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200000000000000L, active2, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(16, 163);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x9000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(16, 123);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(16, 136);
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0x800L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(16, 93);
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L, active1, 0x4100L, active2, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x1000000010L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10000L, active2, 0x4200L);
      case 49:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(17, 87);
         break;
      case 50:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(17, 89);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000000000009110L, active2, 0x20000001L);
      case 68:
      case 100:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(17, 145);
         return jjMoveStringLiteralDfa18_0(active0, 0x4040000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L, active1, 0L, active2, 0x1000000L);
      case 70:
      case 102:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(17, 120);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x280000000000060L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 78:
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(17, 150);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0x8080002L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(17, 132);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x18000000400000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 84:
      case 116:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(17, 164);
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L, active1, 0x40000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L, active1, 0x800L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(17, 66);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(17, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, active2);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L, active1, 0x80000000L, active2, 0L);
      case 54:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L, active1, 0x18000000000000L, active2, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(18, 55);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(18, 94);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(18, 121);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8080002L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000L, active2, 0x21000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x8020000000000000L, active1, 0x4000L, active2, 0x1L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(18, 119);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8000000000009068L, active2, 0x40000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, active2);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, active2);
      return 19;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x168L, active2, 0L);
      case 53:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(19, 142);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000L, active1, 0L, active2, 0x40000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(19, 65);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(19, 83);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(19, 91);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 69:
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(19, 76);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(19, 79);
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x800L, active2, 0x1000000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(19, 51);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(19, 128);
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10000L, active2, 0x4000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x18000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, active2);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(18, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, active2);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x18000000000008L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000L, active1, 0x100L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(20, 54);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10800L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20L, active2, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x80000000L, active2, 0x40000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, active2);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(19, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, active2);
      return 21;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x840L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x18000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(21, 127);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000L, active1, 0x400000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(21, 80);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(21, 154);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(21, 158);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x20L, active2, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, active2);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(20, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1, active2);
      return 22;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000000000000L, active1, 0x100L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(22, 67);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0xc000000000000000L, active1, 0x4000L, active2, 0x1000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(22, 115);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(22, 116);
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 84:
      case 116:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(22, 157);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1, active2);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(21, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1, active2);
      return 23;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(23, 86);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(23, 47);
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(23, 53);
         return jjMoveStringLiteralDfa24_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(23, 152);
         return jjMoveStringLiteralDfa24_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1, active2);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(22, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, active1, active2);
      return 24;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(24, 63);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(24, 78);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(24, 70);
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(24, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, active1, active2);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(23, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, active1, active2);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x100L, active2, 0x200L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(25, 62);
         break;
      case 84:
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(25, 75);
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x80000010L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, active1, active2);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(24, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, active2);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active1, 0x10L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa27_0(active1, 0L, active2, 0x200L);
      case 83:
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(26, 95);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa27_0(active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa27_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(25, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, active1, active2);
      return 27;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa28_0(active1, 0x10L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(27, 72);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa28_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(26, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, active1, active2);
      return 28;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(28, 68);
         break;
      case 83:
      case 115:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(28, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, active1, active2);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 443;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 443:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(120);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(6, 21);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(22, 27);
                  else if (curChar == 34)
                     jjCheckNAdd(6);
                  else if (curChar == 35)
                     jjCheckNAddStates(28, 30);
                  if (curChar == 49)
                     jjCheckNAddStates(31, 36);
                  else if (curChar == 48)
                     jjCheckNAddStates(37, 54);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 34 && kind > 40)
                     kind = 40;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(6, 21);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 45)
                     jjAddStates(55, 56);
                  break;
               case 32:
                  if (curChar == 48)
                     jjCheckNAddStates(57, 65);
                  break;
               case 33:
                  if (curChar == 49)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if (curChar == 45)
                     jjAddStates(66, 69);
                  break;
               case 35:
                  if (curChar == 48)
                     jjCheckNAddStates(70, 78);
                  break;
               case 36:
                  if (curChar == 49 && kind > 22)
                     kind = 22;
                  break;
               case 37:
                  if (curChar == 50 && kind > 22)
                     kind = 22;
                  break;
               case 38:
                  if (curChar == 51 && kind > 22)
                     kind = 22;
                  break;
               case 39:
                  if (curChar == 52 && kind > 22)
                     kind = 22;
                  break;
               case 40:
                  if (curChar == 53 && kind > 22)
                     kind = 22;
                  break;
               case 41:
                  if (curChar == 54 && kind > 22)
                     kind = 22;
                  break;
               case 42:
                  if (curChar == 55 && kind > 22)
                     kind = 22;
                  break;
               case 43:
                  if (curChar == 56 && kind > 22)
                     kind = 22;
                  break;
               case 44:
                  if (curChar == 57 && kind > 22)
                     kind = 22;
                  break;
               case 45:
                  if (curChar == 49)
                     jjCheckNAddStates(79, 88);
                  break;
               case 46:
                  if (curChar == 48 && kind > 22)
                     kind = 22;
                  break;
               case 47:
                  if (curChar == 50)
                     jjCheckNAddStates(79, 88);
                  break;
               case 48:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(46, 36);
                  break;
               case 49:
                  if (curChar == 50)
                     jjCheckNAdd(34);
                  break;
               case 50:
                  if (curChar == 51)
                     jjCheckNAdd(34);
                  break;
               case 51:
                  if (curChar == 52)
                     jjCheckNAdd(34);
                  break;
               case 52:
                  if (curChar == 53)
                     jjCheckNAdd(34);
                  break;
               case 53:
                  if (curChar == 54)
                     jjCheckNAdd(34);
                  break;
               case 54:
                  if (curChar == 55)
                     jjCheckNAdd(34);
                  break;
               case 55:
                  if (curChar == 56)
                     jjCheckNAdd(34);
                  break;
               case 56:
                  if (curChar == 57)
                     jjCheckNAdd(34);
                  break;
               case 57:
                  if (curChar == 49)
                     jjCheckNAddStates(89, 91);
                  break;
               case 58:
                  if (curChar == 48)
                     jjCheckNAdd(34);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if (curChar == 45)
                     jjAddStates(92, 93);
                  break;
               case 63:
                  if (curChar == 48)
                     jjCheckNAddStates(94, 102);
                  break;
               case 64:
                  if (curChar == 49 && kind > 23)
                     kind = 23;
                  break;
               case 65:
                  if (curChar == 50 && kind > 23)
                     kind = 23;
                  break;
               case 66:
                  if (curChar == 51 && kind > 23)
                     kind = 23;
                  break;
               case 67:
                  if (curChar == 52 && kind > 23)
                     kind = 23;
                  break;
               case 68:
                  if (curChar == 53 && kind > 23)
                     kind = 23;
                  break;
               case 69:
                  if (curChar == 54 && kind > 23)
                     kind = 23;
                  break;
               case 70:
                  if (curChar == 55 && kind > 23)
                     kind = 23;
                  break;
               case 71:
                  if (curChar == 56 && kind > 23)
                     kind = 23;
                  break;
               case 72:
                  if (curChar == 57 && kind > 23)
                     kind = 23;
                  break;
               case 73:
                  if (curChar == 49)
                     jjCheckNAddStates(103, 105);
                  break;
               case 74:
                  if (curChar == 48 && kind > 23)
                     kind = 23;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 78);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(81);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 83:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 95);
                  break;
               case 85:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if (curChar == 44)
                     jjAddStates(106, 107);
                  break;
               case 87:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(82, 88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 89:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 91:
                  if (curChar == 37 && kind > 32)
                     kind = 32;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(93, 91);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(111, 116);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 85);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 98:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 100:
                  if (curChar == 37 && kind > 33)
                     kind = 33;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 100);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(100);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 104:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(108);
                  break;
               case 109:
                  if (curChar == 45)
                     jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 116:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(120);
                  break;
               case 123:
                  if (curChar == 32)
                     jjCheckNAddStates(117, 119);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(120, 121);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if (curChar == 45)
                     jjAddStates(122, 123);
                  break;
               case 129:
                  if (curChar == 48)
                     jjCheckNAddStates(124, 132);
                  break;
               case 130:
                  if (curChar == 49)
                     jjCheckNAdd(131);
                  break;
               case 131:
                  if (curChar == 45)
                     jjAddStates(133, 136);
                  break;
               case 132:
               case 141:
               case 165:
                  if (curChar == 48)
                     jjCheckNAddStates(137, 145);
                  break;
               case 133:
                  if (curChar == 49)
                     jjCheckNAdd(134);
                  break;
               case 134:
                  if (curChar == 44)
                     jjCheckNAddStates(146, 148);
                  break;
               case 135:
                  if (curChar == 32)
                     jjCheckNAddStates(146, 148);
                  break;
               case 136:
                  if (curChar == 42)
                     jjAddStates(149, 152);
                  break;
               case 137:
                  if (curChar == 45)
                     jjAddStates(153, 154);
                  break;
               case 138:
                  if (curChar == 48)
                     jjCheckNAddStates(155, 163);
                  break;
               case 139:
                  if (curChar == 49)
                     jjCheckNAdd(140);
                  break;
               case 140:
                  if (curChar == 45)
                     jjAddStates(164, 167);
                  break;
               case 142:
                  if (curChar == 50)
                     jjCheckNAdd(134);
                  break;
               case 143:
                  if (curChar == 51)
                     jjCheckNAdd(134);
                  break;
               case 144:
                  if (curChar == 52)
                     jjCheckNAdd(134);
                  break;
               case 145:
                  if (curChar == 53)
                     jjCheckNAdd(134);
                  break;
               case 146:
                  if (curChar == 54)
                     jjCheckNAdd(134);
                  break;
               case 147:
                  if (curChar == 55)
                     jjCheckNAdd(134);
                  break;
               case 148:
                  if (curChar == 56)
                     jjCheckNAdd(134);
                  break;
               case 149:
                  if (curChar == 57)
                     jjCheckNAdd(134);
                  break;
               case 150:
               case 166:
               case 328:
                  if (curChar == 49)
                     jjCheckNAddStates(168, 177);
                  break;
               case 151:
                  if (curChar == 48)
                     jjCheckNAdd(134);
                  break;
               case 152:
               case 167:
               case 329:
                  if (curChar == 50)
                     jjCheckNAddStates(168, 177);
                  break;
               case 153:
               case 168:
               case 330:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(151, 133);
                  break;
               case 154:
                  if (curChar == 50)
                     jjCheckNAdd(140);
                  break;
               case 155:
                  if (curChar == 51)
                     jjCheckNAdd(140);
                  break;
               case 156:
                  if (curChar == 52)
                     jjCheckNAdd(140);
                  break;
               case 157:
                  if (curChar == 53)
                     jjCheckNAdd(140);
                  break;
               case 158:
                  if (curChar == 54)
                     jjCheckNAdd(140);
                  break;
               case 159:
                  if (curChar == 55)
                     jjCheckNAdd(140);
                  break;
               case 160:
                  if (curChar == 56)
                     jjCheckNAdd(140);
                  break;
               case 161:
                  if (curChar == 57)
                     jjCheckNAdd(140);
                  break;
               case 162:
                  if (curChar == 49)
                     jjCheckNAddStates(178, 180);
                  break;
               case 163:
                  if (curChar == 48)
                     jjCheckNAdd(140);
                  break;
               case 164:
                  if (curChar == 45)
                     jjAddStates(181, 184);
                  break;
               case 169:
                  if (curChar == 45)
                     jjAddStates(185, 186);
                  break;
               case 170:
                  if (curChar == 48)
                     jjCheckNAddStates(187, 195);
                  break;
               case 171:
                  if (curChar == 49)
                     jjCheckNAdd(172);
                  break;
               case 172:
                  if (curChar == 45)
                     jjAddStates(196, 199);
                  break;
               case 173:
               case 324:
               case 348:
                  if (curChar == 48)
                     jjCheckNAddStates(200, 208);
                  break;
               case 174:
                  if (curChar != 49)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 175:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(175, 176);
                  break;
               case 177:
                  if (curChar == 32)
                     jjAddStates(209, 211);
                  break;
               case 178:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 183:
                  if (curChar == 45)
                     jjAddStates(212, 213);
                  break;
               case 184:
                  if (curChar == 48)
                     jjCheckNAddStates(214, 222);
                  break;
               case 185:
                  if (curChar == 49)
                     jjCheckNAdd(186);
                  break;
               case 186:
                  if (curChar == 45)
                     jjAddStates(223, 226);
                  break;
               case 187:
               case 231:
                  if (curChar == 48)
                     jjCheckNAddStates(227, 235);
                  break;
               case 188:
                  if (curChar == 49 && kind > 26)
                     kind = 26;
                  break;
               case 189:
                  if (curChar == 50 && kind > 26)
                     kind = 26;
                  break;
               case 190:
                  if (curChar == 51 && kind > 26)
                     kind = 26;
                  break;
               case 191:
                  if (curChar == 52 && kind > 26)
                     kind = 26;
                  break;
               case 192:
                  if (curChar == 53 && kind > 26)
                     kind = 26;
                  break;
               case 193:
                  if (curChar == 54 && kind > 26)
                     kind = 26;
                  break;
               case 194:
                  if (curChar == 55 && kind > 26)
                     kind = 26;
                  break;
               case 195:
                  if (curChar == 56 && kind > 26)
                     kind = 26;
                  break;
               case 196:
                  if (curChar == 57 && kind > 26)
                     kind = 26;
                  break;
               case 197:
               case 232:
                  if (curChar == 49)
                     jjCheckNAddStates(236, 245);
                  break;
               case 198:
                  if (curChar == 48 && kind > 26)
                     kind = 26;
                  break;
               case 199:
               case 233:
                  if (curChar == 50)
                     jjCheckNAddStates(236, 245);
                  break;
               case 200:
               case 234:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(198, 188);
                  break;
               case 201:
                  if (curChar == 50)
                     jjCheckNAdd(186);
                  break;
               case 202:
                  if (curChar == 51)
                     jjCheckNAdd(186);
                  break;
               case 203:
                  if (curChar == 52)
                     jjCheckNAdd(186);
                  break;
               case 204:
                  if (curChar == 53)
                     jjCheckNAdd(186);
                  break;
               case 205:
                  if (curChar == 54)
                     jjCheckNAdd(186);
                  break;
               case 206:
                  if (curChar == 55)
                     jjCheckNAdd(186);
                  break;
               case 207:
                  if (curChar == 56)
                     jjCheckNAdd(186);
                  break;
               case 208:
                  if (curChar == 57)
                     jjCheckNAdd(186);
                  break;
               case 209:
                  if (curChar == 49)
                     jjCheckNAddStates(246, 248);
                  break;
               case 210:
                  if (curChar == 48)
                     jjCheckNAdd(186);
                  break;
               case 211:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(249, 250);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 216:
                  if (curChar == 45)
                     jjAddStates(251, 252);
                  break;
               case 217:
                  if (curChar == 48)
                     jjCheckNAddStates(253, 261);
                  break;
               case 218:
                  if (curChar == 49)
                     jjCheckNAdd(219);
                  break;
               case 219:
                  if (curChar == 45)
                     jjAddStates(262, 265);
                  break;
               case 220:
                  if (curChar == 48)
                     jjCheckNAddStates(266, 274);
                  break;
               case 221:
                  if (curChar == 49)
                     jjCheckNAdd(245);
                  break;
               case 222:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 223:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 227:
                  if (curChar == 45)
                     jjAddStates(275, 276);
                  break;
               case 228:
                  if (curChar == 48)
                     jjCheckNAddStates(277, 285);
                  break;
               case 229:
                  if (curChar == 49)
                     jjCheckNAdd(230);
                  break;
               case 230:
                  if (curChar == 45)
                     jjAddStates(286, 289);
                  break;
               case 235:
                  if (curChar == 50)
                     jjCheckNAdd(230);
                  break;
               case 236:
                  if (curChar == 51)
                     jjCheckNAdd(230);
                  break;
               case 237:
                  if (curChar == 52)
                     jjCheckNAdd(230);
                  break;
               case 238:
                  if (curChar == 53)
                     jjCheckNAdd(230);
                  break;
               case 239:
                  if (curChar == 54)
                     jjCheckNAdd(230);
                  break;
               case 240:
                  if (curChar == 55)
                     jjCheckNAdd(230);
                  break;
               case 241:
                  if (curChar == 56)
                     jjCheckNAdd(230);
                  break;
               case 242:
                  if (curChar == 57)
                     jjCheckNAdd(230);
                  break;
               case 243:
                  if (curChar == 49)
                     jjCheckNAddStates(290, 292);
                  break;
               case 244:
                  if (curChar == 48)
                     jjCheckNAdd(230);
                  break;
               case 245:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 246:
                  if (curChar == 50)
                     jjCheckNAdd(245);
                  break;
               case 247:
                  if (curChar == 51)
                     jjCheckNAdd(245);
                  break;
               case 248:
                  if (curChar == 52)
                     jjCheckNAdd(245);
                  break;
               case 249:
                  if (curChar == 53)
                     jjCheckNAdd(245);
                  break;
               case 250:
                  if (curChar == 54)
                     jjCheckNAdd(245);
                  break;
               case 251:
                  if (curChar == 55)
                     jjCheckNAdd(245);
                  break;
               case 252:
                  if (curChar == 56)
                     jjCheckNAdd(245);
                  break;
               case 253:
                  if (curChar == 57)
                     jjCheckNAdd(245);
                  break;
               case 254:
                  if (curChar == 49)
                     jjCheckNAddStates(293, 302);
                  break;
               case 255:
                  if (curChar == 48)
                     jjCheckNAdd(245);
                  break;
               case 256:
                  if (curChar == 50)
                     jjCheckNAddStates(293, 302);
                  break;
               case 257:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(255, 221);
                  break;
               case 258:
                  if (curChar == 50)
                     jjCheckNAdd(219);
                  break;
               case 259:
                  if (curChar == 51)
                     jjCheckNAdd(219);
                  break;
               case 260:
                  if (curChar == 52)
                     jjCheckNAdd(219);
                  break;
               case 261:
                  if (curChar == 53)
                     jjCheckNAdd(219);
                  break;
               case 262:
                  if (curChar == 54)
                     jjCheckNAdd(219);
                  break;
               case 263:
                  if (curChar == 55)
                     jjCheckNAdd(219);
                  break;
               case 264:
                  if (curChar == 56)
                     jjCheckNAdd(219);
                  break;
               case 265:
                  if (curChar == 57)
                     jjCheckNAdd(219);
                  break;
               case 266:
                  if (curChar == 49)
                     jjCheckNAddStates(303, 305);
                  break;
               case 267:
                  if (curChar == 48)
                     jjCheckNAdd(219);
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 270:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 271:
                  if (curChar == 45)
                     jjAddStates(306, 307);
                  break;
               case 272:
                  if (curChar == 48)
                     jjCheckNAddStates(308, 316);
                  break;
               case 273:
                  if (curChar == 49)
                     jjCheckNAdd(274);
                  break;
               case 274:
                  if (curChar == 45)
                     jjAddStates(317, 320);
                  break;
               case 275:
                  if (curChar == 48)
                     jjCheckNAddStates(321, 329);
                  break;
               case 276:
                  if (curChar == 49)
                     jjCheckNAdd(278);
                  break;
               case 277:
                  if (curChar == 46 && kind > 26)
                     kind = 26;
                  break;
               case 278:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if (curChar == 50)
                     jjCheckNAdd(278);
                  break;
               case 280:
                  if (curChar == 51)
                     jjCheckNAdd(278);
                  break;
               case 281:
                  if (curChar == 52)
                     jjCheckNAdd(278);
                  break;
               case 282:
                  if (curChar == 53)
                     jjCheckNAdd(278);
                  break;
               case 283:
                  if (curChar == 54)
                     jjCheckNAdd(278);
                  break;
               case 284:
                  if (curChar == 55)
                     jjCheckNAdd(278);
                  break;
               case 285:
                  if (curChar == 56)
                     jjCheckNAdd(278);
                  break;
               case 286:
                  if (curChar == 57)
                     jjCheckNAdd(278);
                  break;
               case 287:
                  if (curChar == 49)
                     jjCheckNAddStates(330, 339);
                  break;
               case 288:
                  if (curChar == 48)
                     jjCheckNAdd(278);
                  break;
               case 289:
                  if (curChar == 50)
                     jjCheckNAddStates(330, 339);
                  break;
               case 290:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(288, 276);
                  break;
               case 291:
                  if (curChar == 50)
                     jjCheckNAdd(274);
                  break;
               case 292:
                  if (curChar == 51)
                     jjCheckNAdd(274);
                  break;
               case 293:
                  if (curChar == 52)
                     jjCheckNAdd(274);
                  break;
               case 294:
                  if (curChar == 53)
                     jjCheckNAdd(274);
                  break;
               case 295:
                  if (curChar == 54)
                     jjCheckNAdd(274);
                  break;
               case 296:
                  if (curChar == 55)
                     jjCheckNAdd(274);
                  break;
               case 297:
                  if (curChar == 56)
                     jjCheckNAdd(274);
                  break;
               case 298:
                  if (curChar == 57)
                     jjCheckNAdd(274);
                  break;
               case 299:
                  if (curChar == 49)
                     jjCheckNAddStates(340, 342);
                  break;
               case 300:
                  if (curChar == 48)
                     jjCheckNAdd(274);
                  break;
               case 301:
                  if (curChar != 50)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 302:
                  if (curChar != 51)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 303:
                  if (curChar != 52)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 304:
                  if (curChar != 53)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 305:
                  if (curChar != 54)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 306:
                  if (curChar != 55)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 307:
                  if (curChar != 56)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 308:
                  if (curChar != 57)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 309:
               case 325:
               case 349:
                  if (curChar == 49)
                     jjCheckNAddStates(343, 352);
                  break;
               case 310:
                  if (curChar != 48)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 311:
               case 326:
               case 350:
                  if (curChar == 50)
                     jjCheckNAddStates(343, 352);
                  break;
               case 312:
               case 327:
               case 351:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(310, 174);
                  break;
               case 313:
                  if (curChar == 50)
                     jjCheckNAdd(172);
                  break;
               case 314:
                  if (curChar == 51)
                     jjCheckNAdd(172);
                  break;
               case 315:
                  if (curChar == 52)
                     jjCheckNAdd(172);
                  break;
               case 316:
                  if (curChar == 53)
                     jjCheckNAdd(172);
                  break;
               case 317:
                  if (curChar == 54)
                     jjCheckNAdd(172);
                  break;
               case 318:
                  if (curChar == 55)
                     jjCheckNAdd(172);
                  break;
               case 319:
                  if (curChar == 56)
                     jjCheckNAdd(172);
                  break;
               case 320:
                  if (curChar == 57)
                     jjCheckNAdd(172);
                  break;
               case 321:
                  if (curChar == 49)
                     jjCheckNAddStates(353, 355);
                  break;
               case 322:
                  if (curChar == 48)
                     jjCheckNAdd(172);
                  break;
               case 323:
                  if (curChar == 45)
                     jjAddStates(356, 359);
                  break;
               case 331:
                  if (curChar == 50)
                     jjCheckNAdd(131);
                  break;
               case 332:
                  if (curChar == 51)
                     jjCheckNAdd(131);
                  break;
               case 333:
                  if (curChar == 52)
                     jjCheckNAdd(131);
                  break;
               case 334:
                  if (curChar == 53)
                     jjCheckNAdd(131);
                  break;
               case 335:
                  if (curChar == 54)
                     jjCheckNAdd(131);
                  break;
               case 336:
                  if (curChar == 55)
                     jjCheckNAdd(131);
                  break;
               case 337:
                  if (curChar == 56)
                     jjCheckNAdd(131);
                  break;
               case 338:
                  if (curChar == 57)
                     jjCheckNAdd(131);
                  break;
               case 339:
                  if (curChar == 49)
                     jjCheckNAddStates(360, 362);
                  break;
               case 340:
                  if (curChar == 48)
                     jjCheckNAdd(131);
                  break;
               case 341:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 342:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 343:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 344:
                  if (curChar == 45)
                     jjAddStates(363, 364);
                  break;
               case 345:
                  if (curChar == 48)
                     jjCheckNAddStates(365, 373);
                  break;
               case 346:
                  if (curChar == 49)
                     jjCheckNAdd(347);
                  break;
               case 347:
                  if (curChar == 45)
                     jjAddStates(374, 377);
                  break;
               case 352:
                  if (curChar == 50)
                     jjCheckNAdd(347);
                  break;
               case 353:
                  if (curChar == 51)
                     jjCheckNAdd(347);
                  break;
               case 354:
                  if (curChar == 52)
                     jjCheckNAdd(347);
                  break;
               case 355:
                  if (curChar == 53)
                     jjCheckNAdd(347);
                  break;
               case 356:
                  if (curChar == 54)
                     jjCheckNAdd(347);
                  break;
               case 357:
                  if (curChar == 55)
                     jjCheckNAdd(347);
                  break;
               case 358:
                  if (curChar == 56)
                     jjCheckNAdd(347);
                  break;
               case 359:
                  if (curChar == 57)
                     jjCheckNAdd(347);
                  break;
               case 360:
                  if (curChar == 49)
                     jjCheckNAddStates(378, 380);
                  break;
               case 361:
                  if (curChar == 48)
                     jjCheckNAdd(347);
                  break;
               case 362:
                  if (curChar == 45)
                     jjCheckNAddStates(22, 27);
                  break;
               case 363:
                  if (curChar == 48)
                     jjCheckNAddStates(37, 54);
                  break;
               case 364:
                  if (curChar == 49)
                     jjCheckNAdd(365);
                  break;
               case 365:
                  if (curChar == 45)
                     jjAddStates(381, 384);
                  break;
               case 366:
                  if (curChar == 48)
                     jjCheckNAddStates(385, 393);
                  break;
               case 367:
                  if (curChar == 49 && kind > 24)
                     kind = 24;
                  break;
               case 368:
                  if (curChar == 50 && kind > 24)
                     kind = 24;
                  break;
               case 369:
                  if (curChar == 51 && kind > 24)
                     kind = 24;
                  break;
               case 370:
                  if (curChar == 52 && kind > 24)
                     kind = 24;
                  break;
               case 371:
                  if (curChar == 53 && kind > 24)
                     kind = 24;
                  break;
               case 372:
                  if (curChar == 54 && kind > 24)
                     kind = 24;
                  break;
               case 373:
                  if (curChar == 55 && kind > 24)
                     kind = 24;
                  break;
               case 374:
                  if (curChar == 56 && kind > 24)
                     kind = 24;
                  break;
               case 375:
                  if (curChar == 57 && kind > 24)
                     kind = 24;
                  break;
               case 376:
                  if (curChar == 49)
                     jjCheckNAddStates(394, 403);
                  break;
               case 377:
                  if (curChar == 48 && kind > 24)
                     kind = 24;
                  break;
               case 378:
                  if (curChar == 50)
                     jjCheckNAddStates(394, 403);
                  break;
               case 379:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(377, 367);
                  break;
               case 380:
                  if (curChar == 50)
                     jjCheckNAdd(365);
                  break;
               case 381:
                  if (curChar == 51)
                     jjCheckNAdd(365);
                  break;
               case 382:
                  if (curChar == 52)
                     jjCheckNAdd(365);
                  break;
               case 383:
                  if (curChar == 53)
                     jjCheckNAdd(365);
                  break;
               case 384:
                  if (curChar == 54)
                     jjCheckNAdd(365);
                  break;
               case 385:
                  if (curChar == 55)
                     jjCheckNAdd(365);
                  break;
               case 386:
                  if (curChar == 56)
                     jjCheckNAdd(365);
                  break;
               case 387:
                  if (curChar == 57)
                     jjCheckNAdd(365);
                  break;
               case 388:
                  if (curChar == 49)
                     jjCheckNAdd(389);
                  break;
               case 389:
                  if (curChar == 45)
                     jjAddStates(404, 407);
                  break;
               case 390:
                  if (curChar == 48)
                     jjCheckNAddStates(408, 416);
                  break;
               case 391:
                  if (curChar == 49)
                     jjCheckNAdd(392);
                  break;
               case 392:
                  if (curChar == 44)
                     jjAddStates(417, 418);
                  break;
               case 393:
                  if (curChar == 48)
                     jjCheckNAddStates(419, 436);
                  break;
               case 394:
                  if (curChar == 50)
                     jjCheckNAdd(389);
                  break;
               case 395:
                  if (curChar == 51)
                     jjCheckNAdd(389);
                  break;
               case 396:
                  if (curChar == 52)
                     jjCheckNAdd(389);
                  break;
               case 397:
                  if (curChar == 53)
                     jjCheckNAdd(389);
                  break;
               case 398:
                  if (curChar == 54)
                     jjCheckNAdd(389);
                  break;
               case 399:
                  if (curChar == 55)
                     jjCheckNAdd(389);
                  break;
               case 400:
                  if (curChar == 56)
                     jjCheckNAdd(389);
                  break;
               case 401:
                  if (curChar == 57)
                     jjCheckNAdd(389);
                  break;
               case 402:
                  if (curChar == 49)
                     jjCheckNAdd(403);
                  break;
               case 403:
                  if (curChar == 45)
                     jjAddStates(437, 440);
                  break;
               case 404:
                  if (curChar == 48)
                     jjCheckNAddStates(441, 449);
                  break;
               case 405:
                  if (curChar == 49 && kind > 25)
                     kind = 25;
                  break;
               case 406:
                  if (curChar == 50 && kind > 25)
                     kind = 25;
                  break;
               case 407:
                  if (curChar == 51 && kind > 25)
                     kind = 25;
                  break;
               case 408:
                  if (curChar == 52 && kind > 25)
                     kind = 25;
                  break;
               case 409:
                  if (curChar == 53 && kind > 25)
                     kind = 25;
                  break;
               case 410:
                  if (curChar == 54 && kind > 25)
                     kind = 25;
                  break;
               case 411:
                  if (curChar == 55 && kind > 25)
                     kind = 25;
                  break;
               case 412:
                  if (curChar == 56 && kind > 25)
                     kind = 25;
                  break;
               case 413:
                  if (curChar == 57 && kind > 25)
                     kind = 25;
                  break;
               case 414:
                  if (curChar == 49)
                     jjCheckNAddStates(450, 459);
                  break;
               case 415:
                  if (curChar == 48 && kind > 25)
                     kind = 25;
                  break;
               case 416:
                  if (curChar == 50)
                     jjCheckNAddStates(450, 459);
                  break;
               case 417:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(415, 405);
                  break;
               case 418:
                  if (curChar == 50)
                     jjCheckNAdd(403);
                  break;
               case 419:
                  if (curChar == 51)
                     jjCheckNAdd(403);
                  break;
               case 420:
                  if (curChar == 52)
                     jjCheckNAdd(403);
                  break;
               case 421:
                  if (curChar == 53)
                     jjCheckNAdd(403);
                  break;
               case 422:
                  if (curChar == 54)
                     jjCheckNAdd(403);
                  break;
               case 423:
                  if (curChar == 55)
                     jjCheckNAdd(403);
                  break;
               case 424:
                  if (curChar == 56)
                     jjCheckNAdd(403);
                  break;
               case 425:
                  if (curChar == 57)
                     jjCheckNAdd(403);
                  break;
               case 426:
                  if (curChar == 49)
                     jjCheckNAddStates(460, 465);
                  break;
               case 427:
                  if (curChar == 48)
                     jjCheckNAdd(389);
                  break;
               case 428:
                  if (curChar == 48)
                     jjCheckNAdd(403);
                  break;
               case 429:
                  if (curChar == 50)
                     jjCheckNAdd(392);
                  break;
               case 430:
                  if (curChar == 51)
                     jjCheckNAdd(392);
                  break;
               case 431:
                  if (curChar == 52)
                     jjCheckNAdd(392);
                  break;
               case 432:
                  if (curChar == 53)
                     jjCheckNAdd(392);
                  break;
               case 433:
                  if (curChar == 54)
                     jjCheckNAdd(392);
                  break;
               case 434:
                  if (curChar == 55)
                     jjCheckNAdd(392);
                  break;
               case 435:
                  if (curChar == 56)
                     jjCheckNAdd(392);
                  break;
               case 436:
                  if (curChar == 57)
                     jjCheckNAdd(392);
                  break;
               case 437:
                  if (curChar == 49)
                     jjCheckNAddStates(466, 475);
                  break;
               case 438:
                  if (curChar == 48)
                     jjCheckNAdd(392);
                  break;
               case 439:
                  if (curChar == 50)
                     jjCheckNAddStates(466, 475);
                  break;
               case 440:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(438, 391);
                  break;
               case 441:
                  if (curChar == 49)
                     jjCheckNAddStates(31, 36);
                  break;
               case 442:
                  if (curChar == 48)
                     jjCheckNAdd(365);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 12);
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(476, 480);
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if ((0x200000002000000L & l) != 0L)
                     jjCheckNAdd(19);
                  else if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(10);
                  else if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(16);
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(12);
                  else if ((0x2000000020000L & l) != 0L)
                     jjCheckNAdd(10);
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 24:
                  if ((0x20000000200000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  break;
               case 122:
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(117, 119);
                  break;
               case 1:
                  jjAddStates(28, 30);
                  break;
               case 6:
                  jjAddStates(481, 482);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 9:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x800000008L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 11:
                  if ((0x2000000020000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x400000004000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 13:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x80000000800L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 15:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x400000004L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 17:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 18:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 19:
                  if ((0x10000000100000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 20:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0x200000002L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 22:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(476, 480);
                  break;
               case 25:
                  if ((0x8000000080000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 26:
                  if ((0x20000000200000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 78:
                  if ((0x1000000010L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 108:
                  if (curChar == 95)
                     jjAddStates(483, 484);
                  break;
               case 121:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(122, 12);
                  break;
               case 176:
                  if (curChar == 124)
                     jjAddStates(209, 211);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(28, 30);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(481, 482);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 443 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   97, 98, 100, 82, 83, 85, 28, 59, 75, 76, 81, 82, 83, 85, 97, 98, 
   100, 103, 104, 115, 116, 120, 75, 82, 97, 103, 115, 120, 1, 2, 4, 442, 
   364, 380, 427, 388, 394, 364, 380, 381, 382, 383, 384, 385, 386, 387, 388, 394, 
   395, 396, 397, 398, 399, 400, 401, 32, 57, 33, 49, 50, 51, 52, 53, 54, 
   55, 56, 35, 45, 47, 48, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 
   36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 33, 49, 63, 73, 64, 65, 
   66, 67, 68, 69, 70, 71, 72, 74, 64, 65, 87, 94, 88, 89, 91, 82, 
   83, 85, 88, 89, 91, 123, 124, 136, 125, 341, 129, 339, 130, 331, 332, 333, 
   334, 335, 336, 337, 338, 132, 328, 329, 330, 133, 142, 143, 144, 145, 146, 147, 
   148, 149, 135, 124, 136, 137, 164, 169, 323, 138, 162, 139, 154, 155, 156, 157, 
   158, 159, 160, 161, 141, 150, 152, 153, 151, 133, 142, 143, 144, 145, 146, 147, 
   148, 149, 163, 139, 154, 165, 166, 167, 168, 170, 321, 171, 313, 314, 315, 316, 
   317, 318, 319, 320, 173, 309, 311, 312, 174, 301, 302, 303, 304, 305, 306, 307, 
   308, 177, 211, 212, 184, 209, 185, 201, 202, 203, 204, 205, 206, 207, 208, 187, 
   197, 199, 200, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 188, 189, 190, 
   191, 192, 193, 194, 195, 196, 210, 185, 201, 213, 268, 217, 266, 218, 258, 259, 
   260, 261, 262, 263, 264, 265, 220, 254, 256, 257, 221, 246, 247, 248, 249, 250, 
   251, 252, 253, 228, 243, 229, 235, 236, 237, 238, 239, 240, 241, 242, 231, 232, 
   233, 234, 244, 229, 235, 255, 221, 246, 247, 248, 249, 250, 251, 252, 253, 267, 
   218, 258, 272, 299, 273, 291, 292, 293, 294, 295, 296, 297, 298, 275, 287, 289, 
   290, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 276, 279, 280, 281, 282, 
   283, 284, 285, 286, 300, 273, 291, 310, 174, 301, 302, 303, 304, 305, 306, 307, 
   308, 322, 171, 313, 324, 325, 326, 327, 340, 130, 331, 345, 360, 346, 352, 353, 
   354, 355, 356, 357, 358, 359, 348, 349, 350, 351, 361, 346, 352, 366, 376, 378, 
   379, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 367, 368, 369, 370, 371, 
   372, 373, 374, 375, 390, 437, 439, 440, 391, 429, 430, 431, 432, 433, 434, 435, 
   436, 393, 426, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 418, 419, 420, 
   421, 422, 423, 424, 425, 404, 414, 416, 417, 405, 406, 407, 408, 409, 410, 411, 
   412, 413, 415, 405, 406, 407, 408, 409, 410, 411, 412, 413, 427, 388, 394, 428, 
   402, 418, 438, 391, 429, 430, 431, 432, 433, 434, 435, 436, 24, 25, 16, 19, 
   26, 6, 7, 109, 110, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\55", "\72", "\54", null, "\137", "\173", 
"\175", "\75", "\42", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffff1fc7c07dc1L, 0xffffffffffffffffL, 0x1fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[443];
private final int[] jjstateSet = new int[886];
protected char curChar;
/** Constructor. */
public ScenarioParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ScenarioParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 443; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
